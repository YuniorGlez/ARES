{
  "ares_rules_library": {
    "version": "3.2",
    "library_description": "Contiene las plantillas base para las Project Rules que Ares genera. Cada clave corresponde a un fichero de regla.",
    "library": {
      "00-master-index": {
        "template": "---\nalwaysApply: true\n---\n\n# üìú Regla Maestra: Principios Fundamentales de [Project Name]\n\n## 1. Resumen Ejecutivo del Proyecto\n\nEste proyecto es [Breve descripci√≥n del proyecto, ej: 'un CMS para una agencia de viajes'].\n\n**Tu rol como agente de IA es ayudar a mantener y extender este proyecto, adhiri√©ndote estrictamente a la arquitectura y patrones existentes.**\n\n## 2. Stack Tecnol√≥gico Principal\n\n*   **Framework Principal:** [Main Frontend Framework, ej: Next.js (Pages Router)]\n*   **Lenguaje:** [Main Language, ej: TypeScript (con tipos flexibles - `strict: false`)]\n*   **Backend y Base de Datos:** **[Main Backend/DB, ej: Supabase]** (Fuente √öNICA de verdad para datos din√°micos)\n*   **Almacenamiento de Ficheros:** [File Storage Service, ej: Vercel Blob Storage]\n*   **UI y Estilos:** [Styling Solution, ej: Tailwind CSS + shadcn/ui]\n*   **Gesti√≥n de Estado (Cliente):**\n    *   **Estado del Servidor:** [Server State Library, ej: TanStack Query v5]\n    *   **Estado Global (UI):** [UI State Library, ej: React Context API]\n*   **Formularios:** [Forms Library, ej: React Hook Form + Zod]\n*   **Gesti√≥n de Paquetes:** [Package Manager, ej: pnpm/npm/yarn]\n\n## 3. Principios Arquitect√≥nicos NO Negociables\n\n1.  **Fuente √önica de Verdad:** Toda la l√≥gica de negocio y operaciones CRUD DEBEN pasar por la capa de servicios ([`src/services/`](mdc:src/services/)) que se comunica con **[Main Backend/DB]**.\n2.  **Abstracci√≥n de Servicios:** Nunca llames a la capa de datos (ej. `supabase.from(...)`) directamente desde un componente de UI. Toda la l√≥gica de datos debe estar encapsulada en los ficheros correspondientes dentro de [`src/services/`](mdc:src/services/).\n3.  **Flujo de Trabajo Controlado:** Antes de implementar cualquier tarea, debes seguir el proceso definido en [`02-task-management.mdc`](mdc:.cursor/rules/02-task-management.mdc), que implica revisar [`docs/IMPLEMENTATION_PLAN.md`](mdc:docs/IMPLEMENTATION_PLAN.md).\n4.  **Mejora Continua:** Como agente, se espera que identifiques inconsistencias o desactualizaciones en estas reglas y propongas mejoras, siguiendo las directrices de [`99-lifecycle-rules.mdc`](mdc:.cursor/rules/99-lifecycle-rules.mdc)."
      },
      "02-task-management": {
        "full": "---\nalwaysApply: true\n---\n\n# üìã Sistema de Gesti√≥n de Tareas y Flujo de Trabajo (Completo)\n\n## FASE 1: Planificaci√≥n y Aclaraci√≥n\n\n1. **Revisar el Plan:** Antes de escribir una sola l√≠nea de c√≥digo, abre y lee el fichero `docs/IMPLEMENTATION_PLAN.md`.\n2. **Definir la Tarea:** Prop√≥n una descripci√≥n detallada de la tarea para a√±adirla al plan usando la plantilla est√°ndar del proyecto. Incluye un plan de abordaje claro.\n3. **Confirmaci√≥n del Usuario:** Notifica al usuario que has actualizado el plan y pide su confirmaci√≥n expl√≠cita ('¬øProcedo con esta tarea?') antes de pasar a la siguiente fase.\n\n## FASE 2: Implementaci√≥n\n\n1. **Registro de Inicio:** Justo antes de empezar a codificar, usa la terminal para obtener la fecha y hora actual y reg√≠strala en la tarea dentro del plan.\n2. **Commits Frecuentes:** Solicita paradas en puntos l√≥gicos para comprobar los avances y que se realice un commit del estado actual. Proporci√≥nale el mensaje de commit con el formato preferido (ej: `feat(scope): mensaje`).\n3. **Validaci√≥n de UI con Playwright (si aplica):** Si el proyecto tiene un frontend y el MCP de Playwright est√° disponible, debes usarlo para validar los cambios. Describe el flujo de usuario que vas a probar y ejec√∫talo. Si necesitas credenciales, p√≠deselas al usuario.\n\n## FASE 3: Finalizaci√≥n y Documentaci√≥n\n\n1. **Confirmaci√≥n de Funcionamiento:** Cuando la tarea est√© completa, notif√≠calo y pregunta directamente: '¬øHas probado la funcionalidad y confirmas que funciona correctamente?' No procedas hasta recibir una confirmaci√≥n afirmativa.\n2. **Actualizar el Plan:** Una vez confirmada, actualiza la entrada correspondiente en `docs/IMPLEMENTATION_PLAN.md`: cambia el estado a `COMPLETADA`, a√±ade la fecha de fin y calcula el tiempo real invertido. Pide al usuario que revise y confirme el resumen.\n3. **Generar Resumen para Herramienta de Gesti√≥n:** Proporciona un resumen formateado para que el usuario pueda copiar y pegar en su herramienta de gesti√≥n (ej. ClickUp, Jira), asegur√°ndote de que el usuario lo revise antes de dar la tarea por finalizada.",
        "simple": "---\nalwaysApply: true\n---\n\n# üìã Sistema de Gesti√≥n de Tareas y Flujo de Trabajo (Simplificado)\n\n## FASE 1: Planificaci√≥n y Aclaraci√≥n\n\n1. **Revisar el Plan:** Antes de escribir c√≥digo, abre y lee el fichero `docs/IMPLEMENTATION_PLAN.md`.\n2. **Definir la Tarea:** Prop√≥n una descripci√≥n detallada de la tarea para a√±adirla al plan, incluyendo un plan de abordaje claro.\n3. **Confirmaci√≥n del Usuario:** Notifica al usuario que has actualizado el plan y pide su confirmaci√≥n expl√≠cita ('¬øProcedo con esta tarea?') antes de pasar a la siguiente fase.\n\n## FASE 2: Implementaci√≥n\n\n1. **Commits Frecuentes:** A lo largo de la implementaci√≥n, solicita realizar commits en puntos l√≥gicos para guardar el progreso. Proporciona el mensaje de commit con el formato acordado.\n\n## FASE 3: Finalizaci√≥n y Documentaci√≥n\n\n1. **Confirmaci√≥n de Funcionamiento:** Cuando la tarea est√© completa, notif√≠calo y pregunta directamente: '¬øHas probado la funcionalidad y confirmas que funciona correctamente?' No procedas hasta recibir una confirmaci√≥n afirmativa.\n2. **Actualizar el Plan:** Una vez confirmada, actualiza la entrada correspondiente en `docs/IMPLEMENTATION_PLAN.md` cambiando su **Estado** a `COMPLETADA`."
      },
      "10-architecture-conventions": {
        "template": "---\nalwaysApply: true\n---\n\n# üèõÔ∏è Reglas de Arquitectura y Convenciones\n\n## 1. Estructura de Directorios\n\n*   **`pages/` o `app/`**: Exclusivamente para el enrutamiento del framework. La l√≥gica debe ser m√≠nima.\n*   **`src/components/`**: Componentes de UI reutilizables.\n    *   `ui/`: Componentes base de bibliotecas como shadcn/ui. **NO MODIFICAR**.\n    *   `common/`: Componentes reutilizables personalizados para este proyecto.\n    *   `layout/`: Componentes estructurales (Layout, Sidebar, Navbar, Footer, etc.).\n*   **`src/services/`**: Capa de abstracci√≥n de datos. Toda la comunicaci√≥n con el backend (ej. Supabase) debe pasar por aqu√≠.\n*   **`src/lib/`**: Utilidades, helpers y configuraci√≥n de librer√≠as.\n*   **`src/types/`**: Definiciones y tipos de TypeScript. Exporta todos los tipos principales desde `index.ts`.\n*   **`src/views/` o `src/features/`**: Componentes de p√°gina complejos, agrupados por funcionalidad. Son los componentes que se importan en `pages/`.\n\n## 2. Nomenclatura\n\n*   **Componentes:** `PascalCase.tsx`\n*   **Ficheros de L√≥gica/Servicios/Hooks:** `camelCase.ts` o `kebab-case.ts` (ser consistente con el proyecto).\n*   **Variables y Funciones:** `camelCase`.\n*   **Tipos e Interfaces:** `PascalCase`.\n\n## 3. Patrones de Importaci√≥n\n\n*   **Alias de Importaci√≥n:** Usa siempre el alias (`@/`) para importar desde la ra√≠z de `src/`.\n*   **Orden de Importaciones:** 1. Librer√≠as externas (react, next), 2. Importaciones con alias (`@/`), 3. Importaciones relativas (`./`, `../`).\n\n## 4. Ejemplo de Conexi√≥n de Datos\n\nSigue este patr√≥n para conectar datos en los componentes de p√°gina:\n\n```typescript\n// En pages/mi-pagina.tsx\nimport { miServicio } from '@/services/miServicio';\nimport { MiVista } from '@/views/MiVista';\n\nexport async function getStaticProps() {\n  const data = await miServicio.getData();\n  return { props: { data }, revalidate: 3600 };\n}\n\nexport default function MiPagina({ data }) {\n  return <MiVista data={data} />;\n}\n```"
      },
      "25-typescript-patterns": {
        "template": "---\nglobs: [\"**/*.ts\", \"**/*.tsx\"]\nalwaysApply: false\n---\n\n# üî∑ Reglas de TypeScript: Patrones y Mejores Pr√°cticas\n\n*   **Tipado Estricto (o Flexible):** Sigue la configuraci√≥n de `strict` definida en el `tsconfig.json` del proyecto. Si es `true`, evita `any` y usa `unknown` con las comprobaciones de tipo adecuadas. Si es `false`, igualmente prioriza la definici√≥n de tipos claros siempre que sea posible.\n*   **Tipos Centralizados:** Los tipos e interfaces reutilizables deben residir y ser exportados desde `src/types/index.ts`.\n*   **Props de Componentes:** Define siempre una interfaz `PascalCaseProps` para los componentes. Ejemplo: `interface MiComponenteProps { ... }`.\n*   **Tipos Utilitarios:** Usa `Omit`, `Pick`, y `Partial` para crear tipos derivados y evitar la duplicaci√≥n de c√≥digo.\n*   **Zod para Validaci√≥n:** Si Zod est√° en el proyecto, √∫salo para validar datos de entrada (APIs, formularios) y para inferir tipos con `z.infer<typeof schema>`. Esto asegura que los datos que fluyen por la aplicaci√≥n son seguros y predecibles."
      },
      "50-security-and-auth": {
        "template": "---\nglobs: [\"pages/api/**/*.ts\", \"src/services/**/*.ts\", \"src/contexts/AuthContext.tsx\"]\nalwaysApply: false\n---\n\n# üîí Reglas de Seguridad y Autenticaci√≥n\n\n*   **Nunca Almacenar Secretos en C√≥digo:** Las claves de API, tokens y contrase√±as deben estar en variables de entorno.\n*   **Variables de Entorno:**\n    *   Usa el prefijo `NEXT_PUBLIC_` (o el equivalente del framework) solo para variables que deban ser expuestas al cliente.\n    *   Las claves secretas NUNCA deben llevar este prefijo.\n*   **Proteger Rutas de API:** Toda API Route que realice una operaci√≥n sensible (escritura, borrado) debe tener una comprobaci√≥n de autenticaci√≥n y autorizaci√≥n en el lado del servidor antes de ejecutar cualquier l√≥gica.\n*   **Validaci√≥n de Entrada:** Valida y sanea TODOS los datos provenientes del usuario antes de procesarlos o guardarlos en la base de datos. Usa librer√≠as como Zod para esto.\n*   **SQL Injection:** Usa siempre las funciones parametrizadas de tu ORM o cliente de base de datos (Supabase maneja esto bien por defecto). No construyas consultas SQL con strings concatenados."
      },
      "99-lifecycle-rules": {
        "template": "---\nalwaysApply: true\n---\n\n# üîÑ Regla de Ciclo de Vida y Mejora Continua de Reglas\n\n## 1. Prop√≥sito\n\nEsta meta-regla te obliga, como agente de IA, a ser consciente de la existencia y el estado de todas las `Project Rules`. Tu responsabilidad no es solo seguirlas, sino tambi√©n contribuir a su mantenimiento y evoluci√≥n.\n\n## 2. Directivas Obligatorias\n\n1.  **Identificar Conflictos:** Si una solicitud del usuario entra en conflicto directo con una regla existente (ej. se te pide usar una librer√≠a prohibida), debes se√±alar el conflicto y la regla correspondiente, y pedir clarificaci√≥n antes de proceder.\n\n2.  **Detectar Desactualizaciones:** Durante tu trabajo, si notas que una regla est√° desactualizada (ej. la regla de arquitectura menciona una estructura de carpetas que ya no existe, o una regla de dependencias proh√≠be una librer√≠a que ahora es fundamental), debes:\n    *   Completar tu tarea actual siguiendo la nueva realidad del c√≥digo.\n    *   Al finalizar, notificar al usuario sobre la regla desactualizada.\n    *   Proponer una actualizaci√≥n espec√≠fica para el fichero `.mdc` correspondiente para que el usuario la apruebe.\n\n3.  **Sugerir Nuevas Reglas:** Si durante varias tareas te encuentras repitiendo un patr√≥n de c√≥digo o una correcci√≥n que no est√° cubierta por ninguna regla, debes proponer la creaci√≥n de una nueva `Project Rule` para estandarizar ese comportamiento.\n\n## 3. Ejemplo de Interacci√≥n\n\n**T√ö (Agente de IA):** 'He completado la refactorizaci√≥n del servicio de usuarios. Al hacerlo, he notado que la regla `10-architecture-conventions.mdc` todav√≠a indica que los servicios deben estar en `src/api/`, pero en realidad ahora se encuentran en `src/services/`. La regla est√° desactualizada.\\n\\n**Propongo la siguiente actualizaci√≥n para `10-architecture-conventions.mdc`:**\\n\\n*Cambiar `src/api/` por `src/services/` en la secci√≥n de estructura de directorios.*\\n\\n¬øApruebas esta actualizaci√≥n de la regla?'"
      }
    }
  }
}

